/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 * OpenAPI spec version: 1.0.7
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';

import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import axios from 'axios';

import type { GetInventory200, Order } from '../../models';

/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 */
export const getInventory = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetInventory200>> => {
  return axios.get(`https://petstore.swagger.io/v2/store/inventory`, options);
};

export const getGetInventoryQueryKey = () => {
  return [`https://petstore.swagger.io/v2/store/inventory`] as const;
};

export const getGetInventoryInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getInventory>>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInventoryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventory>>> = ({ signal }) =>
    getInventory({ signal, ...axiosOptions });

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getInventory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInventoryInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getInventory>>>;
export type GetInventoryInfiniteQueryError = AxiosError<unknown>;

export function useGetInventoryInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getInventory>>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventory>>,
          TError,
          Awaited<ReturnType<typeof getInventory>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getInventory>>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventory>>,
          TError,
          Awaited<ReturnType<typeof getInventory>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventoryInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getInventory>>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Returns pet inventories by status
 */

export function useGetInventoryInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getInventory>>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetInventoryInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetInventoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getInventory>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInventoryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventory>>> = ({ signal }) =>
    getInventory({ signal, ...axiosOptions });

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInventory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInventoryQueryResult = NonNullable<Awaited<ReturnType<typeof getInventory>>>;
export type GetInventoryQueryError = AxiosError<unknown>;

export function useGetInventory<
  TData = Awaited<ReturnType<typeof getInventory>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventory>>,
          TError,
          Awaited<ReturnType<typeof getInventory>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventory<
  TData = Awaited<ReturnType<typeof getInventory>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventory>>,
          TError,
          Awaited<ReturnType<typeof getInventory>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInventory<
  TData = Awaited<ReturnType<typeof getInventory>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Returns pet inventories by status
 */

export function useGetInventory<
  TData = Awaited<ReturnType<typeof getInventory>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetInventoryQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Place an order for a pet
 */
export const placeOrder = (
  order: Order,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Order>> => {
  return axios.post(`https://petstore.swagger.io/v2/store/order`, order, options);
};

export const getPlaceOrderMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof placeOrder>>,
    TError,
    { data: Order },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof placeOrder>>,
  TError,
  { data: Order },
  TContext
> => {
  const mutationKey = ['placeOrder'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeOrder>>, { data: Order }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return placeOrder(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PlaceOrderMutationResult = NonNullable<Awaited<ReturnType<typeof placeOrder>>>;
export type PlaceOrderMutationBody = Order;
export type PlaceOrderMutationError = AxiosError<void>;

/**
 * @summary Place an order for a pet
 */
export const usePlaceOrder = <TError = AxiosError<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof placeOrder>>,
      TError,
      { data: Order },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof placeOrder>>, TError, { data: Order }, TContext> => {
  const mutationOptions = getPlaceOrderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 * @summary Find purchase order by ID
 */
export const getOrderById = (
  orderId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Order>> => {
  return axios.get(`https://petstore.swagger.io/v2/store/order/${orderId}`, options);
};

export const getGetOrderByIdQueryKey = (orderId: number) => {
  return [`https://petstore.swagger.io/v2/store/order/${orderId}`] as const;
};

export const getGetOrderByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getOrderById>>>,
  TError = AxiosError<void>,
>(
  orderId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrderByIdQueryKey(orderId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderById>>> = ({ signal }) =>
    getOrderById(orderId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!orderId,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetOrderByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderById>>>;
export type GetOrderByIdInfiniteQueryError = AxiosError<void>;

export function useGetOrderByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getOrderById>>>,
  TError = AxiosError<void>,
>(
  orderId: number,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          Awaited<ReturnType<typeof getOrderById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetOrderByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getOrderById>>>,
  TError = AxiosError<void>,
>(
  orderId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          Awaited<ReturnType<typeof getOrderById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetOrderByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getOrderById>>>,
  TError = AxiosError<void>,
>(
  orderId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Find purchase order by ID
 */

export function useGetOrderByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getOrderById>>>,
  TError = AxiosError<void>,
>(
  orderId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetOrderByIdInfiniteQueryOptions(orderId, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetOrderByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrderById>>,
  TError = AxiosError<void>,
>(
  orderId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrderByIdQueryKey(orderId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderById>>> = ({ signal }) =>
    getOrderById(orderId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!orderId,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetOrderByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderById>>>;
export type GetOrderByIdQueryError = AxiosError<void>;

export function useGetOrderById<
  TData = Awaited<ReturnType<typeof getOrderById>>,
  TError = AxiosError<void>,
>(
  orderId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          Awaited<ReturnType<typeof getOrderById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetOrderById<
  TData = Awaited<ReturnType<typeof getOrderById>>,
  TError = AxiosError<void>,
>(
  orderId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          Awaited<ReturnType<typeof getOrderById>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetOrderById<
  TData = Awaited<ReturnType<typeof getOrderById>>,
  TError = AxiosError<void>,
>(
  orderId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Find purchase order by ID
 */

export function useGetOrderById<
  TData = Awaited<ReturnType<typeof getOrderById>>,
  TError = AxiosError<void>,
>(
  orderId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetOrderByIdQueryOptions(orderId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 * @summary Delete purchase order by ID
 */
export const deleteOrder = (
  orderId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.delete(`https://petstore.swagger.io/v2/store/order/${orderId}`, options);
};

export const getDeleteOrderMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOrder>>,
    TError,
    { orderId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOrder>>,
  TError,
  { orderId: number },
  TContext
> => {
  const mutationKey = ['deleteOrder'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOrder>>,
    { orderId: number }
  > = (props) => {
    const { orderId } = props ?? {};

    return deleteOrder(orderId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteOrderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrder>>>;

export type DeleteOrderMutationError = AxiosError<void>;

/**
 * @summary Delete purchase order by ID
 */
export const useDeleteOrder = <TError = AxiosError<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteOrder>>,
      TError,
      { orderId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteOrder>>,
  TError,
  { orderId: number },
  TContext
> => {
  const mutationOptions = getDeleteOrderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
